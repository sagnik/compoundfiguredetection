{"Caption":"Figure 1: Top (a), (b): Impact of data set size and number of patterns in isolation; pS = 0.8; pL = 0.05; minsupp = 0.05; Bottom (c), (d): Combined impact of data set size and number of patterns; same parameters. ","ImageText":[],"Mention":["tern length increases with it).\nFirst, the influence of data set size and number of patterns\nwere studied in isolation: 1000 sessions were duplicated to\ngenerate 2000 sessions with the same number of patterns,\nconcatenated 3 times to generate 3000 sessions, etc. Figure\n1 (a) shows that time is linear in data set size, and that\nthe slope increases with the number of patterns (induced by\nincreasing the concept branching factor). Figure 1 (b) plots\nthe same data (plus one run with an intermediate branch-\ning factor) by the number of patterns, keeping the number\nof sessions constant along each line. It shows that in this\nsetting, time is sublinear in the number of patterns. Figure\n1 (c) show the combined effects. The thick line illustrates\nthe effect of adding 1000 more, 2000 more, etc. different ses-\nsions, while the thin lines show the effect of only duplicating\nthe data set (as in (a)).\nFigure 1 (d) plots the additional time (= the vertical dif-\nference between thin-line endpoints and the thick line in (c))\nagainst additional patterns, revealing a linear effect.\nSimilar graphs are obtained for a wide variety of param-\neter settings, and also for real data. However, time re-\nquirements increase strongly when patterns get bigger: Fig.\n2 (b) shows that the impact of additional patterns rises\nmore strongly for big than for small patterns (as = aver-\nage size\/number of edges), which leads to a slightly above-\nlinear increase in time with respect to data set size. Since\nWeb navigation data generally exhibit \u201Cshort\u201D or \u201Cmedium\u201D\npatterns, this problem concerns them only rarely.\nThe program required substantial memory (up to 500MB\nfor the large patterns in Fig. 2), which is very undesirable\nand partly due to Java\u2019s incomplete garbage collection. We\nplan a reimplementation in C++ to substantially improve\nboth memory consumption and the absolute level of run-\ntimes.\n"],"Page":5,"Number":1,"Type":"Figure","CaptionBB":[73,463,772,491],"Height":1169,"Width":827,"DPI":100,"ImageBB":[126,75,725,448]}