{"Caption":"Figure 5: Path Tiling","ImageText":[{"Text":"ROOT","TextBB":[478.522,365.533,490.799,369.486],"Rotation":0},{"Text":"...","TextBB":[532.643,394.962,537.717,400.891],"Rotation":0},{"Text":"...","TextBB":[667.946,394.413,673.02,400.342],"Rotation":0},{"Text":"...","TextBB":[533.771,589.863,538.845,595.793],"Rotation":0},{"Text":"...","TextBB":[669.073,589.863,674.147,595.793],"Rotation":0},{"Text":"TILE","TextBB":[488.407,632.431,503.06,638.36],"Rotation":0},{"Text":"1","TextBB":[504.751,632.431,508.134,638.36],"Rotation":0},{"Text":"...","TextBB":[531.516,632.138,536.59,638.067],"Rotation":0},{"Text":"TILE","TextBB":[584.208,632.686,598.862,638.616],"Rotation":0},{"Text":"Nâˆ’1","TextBB":[600.553,632.686,612.635,638.616],"Rotation":0},{"Text":"...","TextBB":[670.201,634.335,675.275,640.264],"Rotation":0},{"Text":"TILE","TextBB":[706.282,632.688,720.935,638.617],"Rotation":0},{"Text":"N","TextBB":[722.626,632.688,727.511,638.617],"Rotation":0}],"Mention":["We can restructure computation within the algorithm\nso as to improve temporal locality. The goal of restruc-\nturing the algorithm is to maximize reuse of the pre\fx\ntree once it is fetched into cache. We accomplish this\nby reorganizing computation, and thus, accesses to the\npre\fx tree, in the algorithm. Our approach, called path\ntiling works as follows.\nFirst, we break down the tree into relatively \fxed\nsized blocks of memory (tiles) along paths of the tree\nfrom leaf nodes to the root, as illustrated in Figure 5.\nThis is possible because our tree is allocated in depth\n\frst order. The tiles are identi\fed using their start and\nend memory addresses.\nNext, we iteratively fetch each tile into cache. Then\nfor each frequent item i, we traverse the part of its con-\nditional pattern base that has leaf nodes located within\nthe tile's start and end address. There is a large over-\n","lap between the conditional pattern bases of di\u000Berent\nitems. Thus, once a tile is brought into the cache, con-\nditional pattern base accesses for all items that hit the\ntile are managed in cache. This dramatically improves\ntemporal locality for the algorithm.\nOnce we determine the number of frequent items in\nthe conditional pattern bases of all items i in D, we\nmust build the projected pre\fx trees for each i. As\nthis step also accesses the conditional pattern bases as\nabove, it can also make use of path tiling. This im-\nproves temporal locality through the conditional tree\nbuilding phase, but results in increased memory usage,\nas we need to maintain a larger number of projected\ntrees in main memory. There is a workaround how-\never. We introduce an additional loop that builds a\nconditional pre\fx tree for the \frst k items, and not\nall items. These k trees are processed recursively, af-\nter which they are purged. We then continue to the\nnext k items, and proceed similarly. We have not in-\ncluded this additional loop in Figure 5 for simplicity of\nexplanation.\n"],"Page":8,"Number":5,"Type":"Figure","CaptionBB":[541,656,673,672],"Height":1100,"Width":850,"DPI":100,"ImageBB":[467,357,751,641]}