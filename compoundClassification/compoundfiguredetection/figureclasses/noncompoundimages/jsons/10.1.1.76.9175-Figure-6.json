{"Caption":"Figure 6: Wrapper for the pin page function which allows the ordering between epochs to be relaxed. ","ImageText":[{"Text":"page","TextBB":[98.3014,83.6927,124.452,94.0659],"Rotation":0},{"Text":"t","TextBB":[129.161,83.6927,135.699,94.0659],"Rotation":0},{"Text":"*pin","TextBB":[142.237,83.6927,168.387,94.0659],"Rotation":0},{"Text":"page","TextBB":[173.096,83.6927,199.247,94.0659],"Rotation":0},{"Text":"wrapper(pageid","TextBB":[203.954,83.6927,295.482,94.0659],"Rotation":0},{"Text":"t","TextBB":[300.192,83.6927,306.729,94.0659],"Rotation":0},{"Text":"id)","TextBB":[313.267,83.6927,332.88,94.0659],"Rotation":0},{"Text":"{","TextBB":[339.419,81.9618,345.82,93.7172],"Rotation":0},{"Text":"static","TextBB":[123.142,98.9136,162.368,109.287],"Rotation":0},{"Text":"intra","TextBB":[168.906,98.9136,201.594,109.287],"Rotation":0},{"Text":"transaction","TextBB":[206.304,98.9136,278.219,109.287],"Rotation":0},{"Text":"latch","TextBB":[282.929,98.9136,315.618,109.287],"Rotation":0},{"Text":"mut;","TextBB":[322.155,98.9136,348.306,109.287],"Rotation":0},{"Text":"page","TextBB":[123.142,114.134,149.292,124.508],"Rotation":0},{"Text":"t","TextBB":[154.001,114.134,160.539,124.508],"Rotation":0},{"Text":"*ret;","TextBB":[167.077,114.134,199.765,124.508],"Rotation":0},{"Text":"suspend","TextBB":[123.142,144.576,168.906,154.949],"Rotation":0},{"Text":"speculation();","TextBB":[173.615,144.576,265.143,154.949],"Rotation":0},{"Text":"check","TextBB":[123.142,159.797,155.83,170.17],"Rotation":0},{"Text":"pin","TextBB":[160.539,159.797,180.152,170.17],"Rotation":0},{"Text":"page","TextBB":[184.86,159.797,211.011,170.17],"Rotation":0},{"Text":"arguments(id);","TextBB":[215.719,159.797,307.247,170.17],"Rotation":0},{"Text":"acquire","TextBB":[123.142,175.018,168.906,185.391],"Rotation":0},{"Text":"latch(&mut);","TextBB":[173.615,175.018,252.068,185.391],"Rotation":0},{"Text":"\/\/","TextBB":[364.915,144.576,377.99,154.949],"Rotation":0},{"Text":"(iii)","TextBB":[384.526,143.542,405.148,154.601],"Rotation":0},{"Text":"\/\/","TextBB":[364.916,159.797,377.992,170.17],"Rotation":0},{"Text":"(i)","TextBB":[384.526,158.763,398.038,169.821],"Rotation":0},{"Text":"\/\/","TextBB":[364.915,175.018,377.99,185.391],"Rotation":0},{"Text":"(ii)","TextBB":[384.526,173.984,401.599,185.042],"Rotation":0},{"Text":"ret","TextBB":[123.142,205.458,142.755,215.831],"Rotation":0},{"Text":"=","TextBB":[149.293,205.458,155.83,215.831],"Rotation":0},{"Text":"pin","TextBB":[162.368,205.458,181.981,215.831],"Rotation":0},{"Text":"page(id);","TextBB":[186.69,205.458,245.53,215.831],"Rotation":0},{"Text":"release","TextBB":[123.142,235.9,168.906,246.273],"Rotation":0},{"Text":"latch(&mut);","TextBB":[173.615,235.9,252.068,246.273],"Rotation":0},{"Text":"on","TextBB":[123.142,251.121,136.217,261.494],"Rotation":0},{"Text":"violation","TextBB":[140.925,251.121,199.764,261.494],"Rotation":0},{"Text":"call(unpin","TextBB":[204.474,251.121,269.851,261.494],"Rotation":0},{"Text":"page,","TextBB":[274.56,251.121,307.248,261.494],"Rotation":0},{"Text":"ret);","TextBB":[313.786,251.121,346.475,261.494],"Rotation":0},{"Text":"resume","TextBB":[123.142,266.341,162.368,276.715],"Rotation":0},{"Text":"speculation();","TextBB":[167.076,266.341,258.604,276.715],"Rotation":0},{"Text":"\/\/","TextBB":[364.915,235.9,377.99,246.273],"Rotation":0},{"Text":"(ii)","TextBB":[384.526,234.866,401.599,245.924],"Rotation":0},{"Text":"\/\/","TextBB":[364.917,251.121,377.992,261.494],"Rotation":0},{"Text":"(iv)","TextBB":[384.526,250.087,404.8,261.145],"Rotation":0},{"Text":"\/\/","TextBB":[364.914,266.341,377.989,276.715],"Rotation":0},{"Text":"(iii)","TextBB":[384.526,265.308,405.148,276.366],"Rotation":0},{"Text":"return","TextBB":[123.142,296.783,162.368,307.156],"Rotation":0},{"Text":"ret;","TextBB":[168.906,296.783,195.056,307.156],"Rotation":0},{"Text":"}","TextBB":[98.3014,310.273,104.702,322.028],"Rotation":0}],"Mention":["The code wrapper shown in Figure 6 implements\nthis modified version of pin page. In particular, this\ncode does the following: (i) Provides thorough error\nchecking. Since this routine is called from a speculative\nthread, the parameters could be invalid. (ii) Acquires a\nlatch which provides mutual exclusion between epochs\nwithin a transaction, to guard against the possibil-\nity that pin page was not implemented with intra-\ntransaction concurrency in mind. However, this latch\ncan be eliminated if the programmer determines that\nthe implementation of pin page is safe in this respect.\n(iii) Temporarily suspends speculation. While specu-\nlation is suspended, the epoch is non-speculative and\nhence all reads will observe committed machine state\nand all writes will be immediately visible to the rest\nof the system (i.e., no buffering occurs). Hence reads\nperformed by pin page will not cause violations. (iv)\nSaves a pointer to the recovery function, unpin page.\nIf the epoch is violated then unpin page will be called\nto undo the execution of the corresponding call to\npin page.\n","bar shows what happens if we parallelize the loop and\nmake no other optimizations\u2014the existing data de-\npendences in the DBMS prevent any parallelism from\nbeing exploited, and the fact that we have taken a se-\nquential transaction and run it on four CPUs has re-\nduced cache locality, causing it to slow down slightly.\nThe major source of failed speculation in our newly-\nparallelized transaction are the reads and writes to\nlatches; hence we perform the lazy latch optimiza-\ntion described in Section 4.1.1. This optimization fixes\nthe first performance bottleneck, and exposes the next\nbottleneck which is in the lock code. The first opti-\nmization also results in a slight slowdown, since the\nnext bottleneck merely delays detection of failed spec-\nulation (as illustrated in Figure 3(a))\u2014hence more ex-\necution has to be rewound.\nOnce we have eliminated latches as a bottleneck,\nthe next bottleneck exposed is in the locking subsys-\ntem. We remove the lock bottleneck by implementing\nlazy locks from Section 4.1.2. We continue to remove\nthe bottlenecks one by one: applying the code tem-\nplate from Figure 6 to db malloc and the pin page\noperation, parallelizing the free cursor pool, removing\ndependence causing error checks (Section 4.4), adding\npadding to avoid violations due to false sharing (Sec-\ntion 4.5), removing the \u201Clast page referenced\u201D pointer\nfrom the B-tree search code (Section 4.3), delaying the\ngeneration of log entries until epochs are ready to com-\nmit (Section 4.2), and parallelizing the assignment of\nlocker ids.\nIt is tempting to look at Figure 8 and conclude that\nthe most important optimization was parallelizing the\nbuffer pool, since adding this optimization caused the\nexecution time to drop by 40%. However, this is not\nthe case since the impact of the optimizations is cumu-\nlative. If we take the No Optimizations build and\njust enable the buffer pool optimization then the nor-\nmalized performance is 0.98. Instead, Figure 8 implies\nthat the iterative optimization process which we used\nworks well\u2014as the DBMS programmer removes per-\nformance limiting dependences performance gradually\nimproves (and exposes new dependences). Removing\ndependences decreases the time spent on failed execu-\ntion, and improves performance.\n"],"Page":8,"Number":6,"Type":"Figure","CaptionBB":[88,338,415,369],"Height":1100,"Width":850,"DPI":100,"ImageBB":[88,79,417,329]}