{"Caption":"Figure 2: A procedure with a vulnerable call to printf.","ImageText":[{"Text":"(1)","TextBB":[103,785.537,122.992,794.238],"Rotation":0},{"Text":"int","TextBB":[129.492,785.537,149.483,794.238],"Rotation":0},{"Text":"foo","TextBB":[156.15,785.537,176.142,794.238],"Rotation":0},{"Text":"(char","TextBB":[182.642,785.537,215.961,794.238],"Rotation":0},{"Text":"*usrinp)","TextBB":[222.461,785.537,275.772,794.238],"Rotation":0},{"Text":"{","TextBB":[282.272,785.537,288.936,794.238],"Rotation":0},{"Text":"(2)","TextBB":[103,798.037,122.992,806.738],"Rotation":0},{"Text":"char","TextBB":[142.825,798.037,169.481,806.738],"Rotation":0},{"Text":"fmt[LEN];","TextBB":[175.981,798.037,235.956,806.738],"Rotation":0},{"Text":"(3)","TextBB":[103,810.537,122.992,819.238],"Rotation":0},{"Text":"int","TextBB":[142.825,810.537,162.817,819.238],"Rotation":0},{"Text":"a,","TextBB":[169.317,810.537,182.644,819.238],"Rotation":0},{"Text":"b;","TextBB":[189.311,810.537,202.639,819.238],"Rotation":0},{"Text":"(4)","TextBB":[103,822.871,122.992,831.571],"Rotation":0},{"Text":"strncpy(fmt,","TextBB":[142.825,822.871,222.792,831.571],"Rotation":0},{"Text":"usrinp,","TextBB":[229.125,822.871,275.772,831.571],"Rotation":0},{"Text":"LEN","TextBB":[282.272,822.871,302.264,831.571],"Rotation":0},{"Text":"-","TextBB":[308.764,822.871,315.428,831.571],"Rotation":0},{"Text":"1);","TextBB":[322.095,822.871,342.086,831.571],"Rotation":0},{"Text":"(5)","TextBB":[103,835.371,122.992,844.071],"Rotation":0},{"Text":"fmt[LEN","TextBB":[142.825,835.371,189.472,844.071],"Rotation":0},{"Text":"-","TextBB":[195.972,835.371,202.636,844.071],"Rotation":0},{"Text":"1]","TextBB":[209.136,835.371,222.464,844.071],"Rotation":0},{"Text":"=","TextBB":[229.131,835.371,235.795,844.071],"Rotation":0},{"Text":"\u2019\\0\u2019;","TextBB":[242.461,835.371,275.781,844.071],"Rotation":0},{"Text":"(6)","TextBB":[103,847.871,122.992,856.571],"Rotation":0},{"Text":"printf(fmt);","TextBB":[142.825,847.871,222.792,856.571],"Rotation":0},{"Text":"(7)","TextBB":[103,860.371,122.992,869.071],"Rotation":0},{"Text":"}","TextBB":[129.492,860.371,136.156,869.071],"Rotation":0}],"Mention":["To take a concrete example, suppose that fmt is \"Hi%d\" when\nprintf is called in Figure 2. printf starts off in printing mode,\nand advances FMTPTR, printing Hi to stdout as a result. When\n","This section reviews how printf works. Consider the code\nfragment shown in Figure 2. Procedure foo accepts user input,\nwhich is copied into the local variable fmt, a local array of LEN\ncharacters. printf is then called with fmt as its argument. Be-\ncause the first argument to printf can be controlled by the user,\nthis program can potentially be exploited. When printf is called\non line (6), the arguments passed to printf are placed on the\n","of an integer. Note that no integer arguments were explicitly passed\nto printf in Figure 2, hence instead of reading a legitimate inte-\nger value off the stack, in this case ARGPTR reads the values of\nlocal variables in the stack frame of foo. As a result, it is possible\nto read the contents of the stack, which may possibly contain values\nof interest to an attacker, such as return addresses.\n","qualifiers [18] to identify \u201Ctainted\u201D (i.e., user-controlled) inputs that\ncould potentially be used as format-strings. We report on two ex-\nperiments here: the first showing how we can reduce the false alarm\nrate, and the second showing how we can confirm a true vulnera-\nbility by generating an exploit.\nConsider the program in Figure 2. When compiled on our ma-\nchine, the value of DIS is 28 bytes. Irrespective of the value of\nLEN, the size of the buffer fmt, Percent-S reports that the printf\nstatement on line (6) is exploitable. Clearly, small values of LEN\npreclude the possibility of attack. As a result, Percent-S produces\nfalse alarms, because it does not account for the values of the pa-\nrameters DIS and LEN.\nOn the other hand, using our model of printf, we were able\nto infer that a read-exploit (similar to the one reported earlier) is\nnot possible unless LEN is at least 15 bytes, and a write-exploit\n(to write the integer 234) is not possible unless LEN is at least\n20 bytes. In each of these cases, our analysis produces a format-\nstring that demonstrates the exploit, while Percent-S does not.\nWe also used the tool to analyze known format-string vulner-\nabilities real-world software packages; Figure 6 has the details.\nphp-3.0.16 is a language-processor for the widely-used web-\nscripting language php, qpopper-2.53 is a POP3 mail server,\nand wu-ftpd-2.6.0 is a popular file-transfer daemon. We ex-\nplain in detail the exploit against wu-ftpd-2.6.0; the others are\nsimilar. Percent-S correctly identified the location of the vulnera-\nbility in wu-ftpd-2.6.0, but did not produce a format-string\ndemonstrating the exploit. The value of DIS and LEN for this ex-\nample were 9364 and 4096, respectively, which we obtained by\ndisassembling the binary executable. For these values of DIS and\nLEN, we checked whether the attacker could perform the following\nexploit: The attacker uses the buffer that stores the format-string\nto additionally store malicious code, and then overwrites the re-\nturn address in the stack frame of printf using a write exploit\n(Section 4.3) so as to point to the beginning of the malicious code\nsequence instead. We assumed that the return address to be over-\nwritten is at the stack location 0xbfff88c3, and that the malicious\ncode is located at the address 0xbfffbcab, 13288 bytes above\n(and hence located within the buffer that stores the format-string).\nThese address values are easily read off the stack using another ex-\nploit, as explained in Section 4.1. Because the value to be written\nis fairly large, we used a variant of the predicate Bad that allows\nfor writing to a single address using multiple, slightly misaligned\nwrites of smaller values. (Details on doing such misaligned writes\ncan be found in [30, 37].)\n"],"Page":4,"Number":2,"Type":"Figure","CaptionBB":[88,877,391,890],"Height":1100,"Width":850,"DPI":100,"ImageBB":[96,778,385,875]}