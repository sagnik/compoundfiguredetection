{"Caption":"Figure 2: A three-level hierarchy formed by leader election","ImageText":[{"Text":"p1","TextBB":[604.946,84.9059,613.545,92.1154],"Rotation":0},{"Text":"p2","TextBB":[580.589,133.757,589.188,140.967],"Rotation":0},{"Text":"p4","TextBB":[550.04,176.553,558.639,183.763],"Rotation":0},{"Text":"p5","TextBB":[586.644,176.553,595.244,183.763],"Rotation":0},{"Text":"p3","TextBB":[629.44,133.757,638.039,140.967],"Rotation":0},{"Text":"p6","TextBB":[623.386,176.553,631.847,183.763],"Rotation":0},{"Text":"p7","TextBB":[659.989,176.553,668.588,183.763],"Rotation":0}],"Mention":["The plan is to be executed by a group of seven processors,\np1, . . . , p7. To perform distributed plan selection, the first\nstep is to distribute the TPN itself over the processors. A\nTPN is built as a hierarchy of nested subnetworks, and we\nexploit this hierarchy when distributing the plan selection\nproblem.\nTo facilitate TPN distribution, a leader election algorithm\nis used to arrange the processors into a hierarchy (Fig. 2).\nThe hierarchical structure of the TPN is then used to map\nsubnetworks to processors. For example, the master pro-\ncessor p1 handles the composition of two subnetworks of\nthe plan at the start node (node A) and the end node (node\nB). It passes responsibility for each of the two main subnet-\nworks to the two processors immediately beneath it in the\nhierarchy. Nodes C,D,E,F,G,H are passed to p2 and nodes\nI,J,K,L,M,N are passed to p3.\n","We use the leader election algorithm in (Nagpal & Coore\n1998) to arrange the processors into a hierarchical network,\nan example of which is shown in Fig. 2. For each process-\ning node, the node immediately above it in the hierarchy\nis its leader, those at the same level within that branch of\nthe hierarchy are its neighboring leaders and those directly\nbelow it in the hierarchy are its followers. The leader elec-\ntion algorithm forms a hierarchy using a message passing\nscheme that ensures that every node can communicate with\nits leader, as well as with all neighboring leaders and fol-\nlowers. Note that the hierarchical communication structure\nlends itself well to distributing the TPN, which is also hier-\narchical. It may be possible to improve the performance of\nthe plan selection algorithm by using the TPN structure to\nguide the formation of the processor hierarchy. This is an\ninteresting direction for future work.\n","We now demonstrate this distribution algorithm on the\nTPN of Fig. 1 and the processor hierarchy of Fig. 2. The\nTPN is supplied from an external source, which establishes\na connection with the top-level leader, p1. The TPN is a\nparallel network at the highest level, hence processor p1\nassigns the start and end nodes (nodes A,B) to itself (line\n7). There are two subnetworks, which p1 assigns to its two\nfollowers, p2 and p3 (lines 15-18). p1 passes the choose\nsubnetwork (nodes C,D,E,F,G,H) to p2 and the sequence\nsubnetwork (nodes I,J,K,L,M,N) to p3. p2 and p3 then pro-\ncess their subnetworks in parallel. p2 assigns the start and\nend nodes (nodes C,D) to itself (line 7). This network has\ntwo subnetworks, which p2 assigns to two of its followers,\np4 and p5 (lines 15-18). p2 passes ActivityA (nodes E,F)\nto p4 and ActivityB (nodes G,H) to p5. Since activities\ncan not be decomposed, p4 and p5 assign nodes E,F and\nG,H, respectively, to themselves (lines 3-4). Meanwhile, p3\nreceives the sequence subnetwork and assigns the start and\nend nodes (nodes I,J) to itself (line 7). This network has two\nsubnetworks, which p3 assigns to two of its followers, p6\nand p7 (lines 15-18). p3 passes ActivityC (nodes K,L) to\np6 and ActivityD (nodes M,N) to p7. p6 and p7 then as-\nsign nodes K,L and nodes M,N, respectively, to themselves\n(lines 3-4).\n"],"Page":2,"Number":2,"Type":"Figure","CaptionBB":[444,206,774,221],"Height":1100,"Width":850,"DPI":100,"ImageBB":[540,73,679,194]}