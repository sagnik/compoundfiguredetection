{"Caption":"Figure 4: UDDI Data Structures","ImageText":[{"Text":"businessEntity","TextBB":[108.721,83.7424,178.941,93.8174],"Rotation":0},{"Text":"businessService","TextBB":[103.979,158.825,183.272,168.9],"Rotation":0},{"Text":"tModel","TextBB":[315.791,158.825,348.478,168.9],"Rotation":0},{"Text":"bindingTemplate","TextBB":[103.188,233.908,183.702,243.983],"Rotation":0},{"Text":"WSDL","TextBB":[290.5,233.908,321.967,243.983],"Rotation":0},{"Text":"Document","TextBB":[324.995,233.908,374.629,243.983],"Rotation":0}],"Mention":["UDDI (Universal, Description, Discovery and Integration) is de-\nsigned to \u201Cprovide a platform-independent way of describing ser-\nvices, discovering businesses, and integrating business services us-\ning the Internet\u201D [40]. Four main data structures can be identified,\nwhich constitute the basic schema: businessEntity, businessSer-\nvice, bindingTemplate, and tModel. While the first three data struc-\ntures form a hierarchy, the tModels can be seen as an independent\nstructure providing technical fingerprints of services, concepts, and\nideas (see Figure 4).\n","that converts price information in a Web service\u2019s reply into the\ncurrency of the consumer\u2019s location.\nClient context information comprises data about a client\u2019s de-\nvice. It includes information about hardware, e.g., processor type\nor display resolution, as well as software, e.g, operating system\nor Web browser type and version. An example of such a context\nblock was also shown in Figure 6. Two schemas are supported for\nthis context type: a rather simple one as used in Figure 6 and an\nRDF-based one as defined in the CC\/PP standard [27] of the W3C.\nThe main purpose of this context type is to allow Web services\nto adjust their output to the client device\u2019s properties. For exam-\nple, Web services from the information systems area, which often\nquery data from a database management system (DBMS), can use\nthis context information to optimize their database queries and to\nquery only data that can actually be displayed at the client. The\nAmazon Web service is an example for such a Web service. In its\nreplies, it includes several lengthy customer reviews. If viewing a\nreply of this Web service on a PDA or cell phone, the inclusion of\nthese reviews is rather pointless as they require too much space.\nOptimally, the corresponding data should not be retrieved from the\nDBMS in the first place. But if this is not possible, e.g., because\nmodifications of the Web service are impossible, context services\ncan be used to adjust the reply of the Web service.\nWe also implemented a context plugin StylesheetFinder which\nuses the Client context to provide the client with a stylesheet that\ncan be used to format the Web service reply. A Web service must\nspecify XSL stylesheets that should be used for the various client\ntypes in its UDDI metadata. Figure 12 shows an example for such\nmetadata. Based on this metadata and the Client context informa-\ntion, the plugin inserts a new context block of type ReplyProperties.\nThis context block, see Figure 13 for an example, is processed by\nclients. They use the specified stylesheet to transform the reply\u2019s\nXML data into HTML.\nThe Consumer context type contains information about the con-\nsumer invoking the Web service, e.g., name, email address, and so\non. Although it is very important, it can actually be used only by\nthe Web services themselves in a sensible way.\nThe Connection Preferences context type allows to specify prop-\nerties of the connections to Web services. It was added by imple-\nmenting a context service ConnnectionPreferencesService. Based\non the content of the corresponding context block, the context ser-\nvice compresses and decompresses Web service messages using\ngzip [7] or the XML compressor XMill [29]. The context service\ncould, e.g., be extended to support encryption, too.\nWith these context types, the motivating scenario of Section 2\ncan be implemented as depicted in Figure 14. Although the At-\ntractionsSearch Web service was not modified, the reply that the\nclient receives contains personalized, context-dependent informa-\ntion. Client and Location context information are processed auto-\nmatically by two context services and one context plugin. After At-\ntractionsSearch generated its reply, the context service DrivingDi-\nrections uses the RoutePlanner Web service to insert driving direc-\n"],"Page":3,"Number":4,"Type":"Figure","CaptionBB":[153,273,327,286],"Height":1100,"Width":850,"DPI":100,"ImageBB":[90,74,390,255]}