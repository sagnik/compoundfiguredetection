{"Caption":"Figure 9: Safe query with dynamic filter","ImageText":[{"Text":"private","TextBB":[87.7958,699.757,133.56,710.13],"Rotation":0},{"Text":"String","TextBB":[140.097,699.757,179.324,710.13],"Rotation":0},{"Text":"namePrefix;","TextBB":[185.861,699.757,257.776,710.13],"Rotation":0},{"Text":"\/\/","TextBB":[264.314,699.757,277.389,710.13],"Rotation":0},{"Text":"may","TextBB":[283.933,698.723,307.12,709.781],"Rotation":0},{"Text":"be","TextBB":[311.703,698.723,322.811,709.781],"Rotation":0},{"Text":"null","TextBB":[327.381,698.723,348.613,709.781],"Rotation":0},{"Text":"private","TextBB":[87.7958,714.286,133.56,724.659],"Rotation":0},{"Text":"Double","TextBB":[140.097,714.286,179.324,724.659],"Rotation":0},{"Text":"minSalary;","TextBB":[185.861,714.286,251.239,724.659],"Rotation":0},{"Text":"\/\/","TextBB":[264.314,714.286,277.389,724.659],"Rotation":0},{"Text":"may","TextBB":[283.933,713.252,307.12,724.31],"Rotation":0},{"Text":"be","TextBB":[311.703,713.252,322.811,724.31],"Rotation":0},{"Text":"null","TextBB":[327.381,713.252,348.613,724.31],"Rotation":0},{"Text":"DynQuery(String","TextBB":[87.7958,743.343,185.861,753.716],"Rotation":0},{"Text":"namePrefix,","TextBB":[192.399,743.343,264.314,753.716],"Rotation":0},{"Text":"Double","TextBB":[270.852,743.343,310.078,753.716],"Rotation":0},{"Text":"minSalary)","TextBB":[316.628,743.343,382.005,753.716],"Rotation":0},{"Text":"{","TextBB":[388.539,741.612,394.94,753.367],"Rotation":0},{"Text":"this.namePrefix","TextBB":[100.871,757.872,198.936,768.245],"Rotation":0},{"Text":"=","TextBB":[205.474,757.872,212.012,768.245],"Rotation":0},{"Text":"namePrefix;","TextBB":[218.55,757.872,290.464,768.245],"Rotation":0},{"Text":"this.minSalary","TextBB":[100.871,772.401,192.399,782.774],"Rotation":0},{"Text":"=","TextBB":[198.936,772.401,205.474,782.774],"Rotation":0},{"Text":"minSalary;","TextBB":[212.012,772.401,277.389,782.774],"Rotation":0},{"Text":"}","TextBB":[87.7958,785.199,94.1966,796.955],"Rotation":0},{"Text":"boolean","TextBB":[87.7958,815.987,133.56,826.36],"Rotation":0},{"Text":"filter(Employee","TextBB":[140.098,815.987,238.163,826.36],"Rotation":0},{"Text":"item)","TextBB":[244.701,815.987,277.389,826.36],"Rotation":0},{"Text":"{","TextBB":[283.933,814.256,290.334,826.012],"Rotation":0},{"Text":"return","TextBB":[100.871,830.516,140.097,840.89],"Rotation":0},{"Text":"(namePrefix","TextBB":[146.635,830.516,218.55,840.89],"Rotation":0},{"Text":"==","TextBB":[225.087,830.516,238.163,840.89],"Rotation":0},{"Text":"null","TextBB":[244.7,830.516,270.851,840.89],"Rotation":0},{"Text":"||","TextBB":[159.713,845.046,172.788,855.419],"Rotation":0},{"Text":"item.name.startsWith(namePrefix))","TextBB":[179.326,845.046,395.082,855.419],"Rotation":0},{"Text":"&&","TextBB":[127.024,859.573,140.099,869.946],"Rotation":0},{"Text":"(minSalary","TextBB":[146.637,859.573,212.014,869.946],"Rotation":0},{"Text":"==","TextBB":[218.552,859.573,231.627,869.946],"Rotation":0},{"Text":"null","TextBB":[238.165,859.573,264.315,869.946],"Rotation":0},{"Text":"||","TextBB":[159.713,874.102,172.788,884.476],"Rotation":0},{"Text":"item.salary","TextBB":[179.326,874.102,251.24,884.476],"Rotation":0},{"Text":">=","TextBB":[257.778,874.102,270.854,884.476],"Rotation":0},{"Text":"minSalary);","TextBB":[277.391,874.102,349.306,884.476],"Rotation":0},{"Text":"}","TextBB":[87.7958,886.901,94.1966,898.656],"Rotation":0},{"Text":"}","TextBB":[74.7194,901.43,81.1202,913.185],"Rotation":0}],"Mention":["terized queries alone are not sufficient. Dynamic queries are\nsometimes used instead of parameterized queries, because\nit is easier to concatenate a parameter text into a query\nstring than to declare and invoke a complete parameterized\nquery. However, this practice is notoriously unsafe and can\ninterfere with reuse of query plans.\nDynamic filters are commonly created by concatenating\nportions of a filter string together to create the complete fil-\nter. If optional components have parameters, the parameter\nlist of the overall query will also be dynamic. Figure 8 illus-\ntrates the creation of dynamic filters and parameters using\nJDO. In this example, a user can search for employees by\nname, salary range, or both. Different filters are constructed\nto respond to user-selected criteria.\nIn a safe query, a dynamic filter is simply a normal filter in\nwhich some sub-expressions depend only on query parame-\nters, not the database. Figure 9 illustrates this technique for\nthe dynamic query given in Figure 8. Short-circuit evalua-\ntion of disjunction allows new DynQuery(\"F\", null) to find\nemployees whose name begins with \u201CF\u201D, but with no limit\non salary. The translation of dynamic queries takes advan-\ntage of the inherent staging [9] of the execute method: the\nparts of the filter that do not depend on the database are\nevaluated as Java expressions in the execute method, while\nthe rest of the filter is translated to a query string for exe-\ncution in the database. The generated code is similar to the\nhand-written version in Figure 8. Details of the translation,\nincluding the mechanism for staging operations, are given\nin Section 4.\n"],"Page":5,"Number":9,"Type":"Figure","CaptionBB":[108,941,371,954],"Height":1169,"Width":827,"DPI":100,"ImageBB":[73,685,396,916]}