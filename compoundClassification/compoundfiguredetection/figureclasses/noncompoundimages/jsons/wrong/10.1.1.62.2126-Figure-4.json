{"Caption":"Figure 4: Meta Data","ImageText":[{"Text":"ID","TextBB":[95.5003,349.031,108.651,360.101],"Rotation":0},{"Text":"1","TextBB":[95.5003,364.531,101.378,375.601],"Rotation":0},{"Text":"2","TextBB":[95.5003,377.531,101.378,388.601],"Rotation":0},{"Text":"3","TextBB":[95.5003,390.531,101.378,401.601],"Rotation":0},{"Text":".","TextBB":[95.5003,403.841,99.6513,414.036],"Rotation":0},{"Text":"..","TextBB":[100.836,403.841,110.156,414.036],"Rotation":0},{"Text":"Representative","TextBB":[126.333,349.031,201.716,360.101],"Rotation":0},{"Text":"Interval","TextBB":[205.989,349.031,245.263,360.101],"Rotation":0},{"Text":"[0.16,","TextBB":[126.333,364.531,153.763,375.601],"Rotation":0},{"Text":"0.2]","TextBB":[157.66,364.531,175.924,375.601],"Rotation":0},{"Text":"[0.393,","TextBB":[126.333,377.531,159.597,388.601],"Rotation":0},{"Text":"0.439]","TextBB":[163.493,377.531,193.425,388.601],"Rotation":0},{"Text":"[0.55,0.596]","TextBB":[126.333,390.531,183.761,401.601],"Rotation":0},{"Text":".","TextBB":[126.333,403.841,130.484,414.036],"Rotation":0},{"Text":"..","TextBB":[131.669,403.841,140.989,414.036],"Rotation":0},{"Text":"(a)","TextBB":[99.8335,422.531,114.733,433.601],"Rotation":0},{"Text":"Encryption","TextBB":[118.663,422.531,175.858,433.601],"Rotation":0},{"Text":"Block","TextBB":[179.987,422.531,208.856,433.601],"Rotation":0},{"Text":"Table","TextBB":[212.819,422.531,241.201,433.601],"Rotation":0},{"Text":"Tag","TextBB":[275.333,343.031,294.539,354.101],"Rotation":0},{"Text":"U84573","TextBB":[275.333,358.531,313.379,369.601],"Rotation":0},{"Text":"DSI","TextBB":[328.5,343.031,348.237,354.101],"Rotation":0},{"Text":"Index","TextBB":[352.166,343.031,380.715,354.101],"Rotation":0},{"Text":"[0.16,","TextBB":[328.5,358.531,355.93,369.601],"Rotation":0},{"Text":"0.2],","TextBB":[359.827,358.531,381.423,369.601],"Rotation":0},{"Text":"[0.55,","TextBB":[328.5,371.031,355.93,382.101],"Rotation":0},{"Text":"0.596]","TextBB":[359.827,371.031,389.758,382.101],"Rotation":0},{"Text":"patient","TextBB":[275.333,384.031,311.398,395.101],"Rotation":0},{"Text":"[0.14,","TextBB":[328.5,384.031,355.93,395.101],"Rotation":0},{"Text":"0.46]","TextBB":[359.827,384.031,383.925,395.101],"Rotation":0},{"Text":"[0.54,","TextBB":[328.5,396.531,355.93,407.601],"Rotation":0},{"Text":"0.86]","TextBB":[359.827,396.531,383.925,407.601],"Rotation":0},{"Text":".","TextBB":[275.333,409.841,279.484,420.036],"Rotation":0},{"Text":"..","TextBB":[280.669,409.841,289.989,420.036],"Rotation":0},{"Text":".","TextBB":[328.5,409.841,332.651,420.036],"Rotation":0},{"Text":"..","TextBB":[333.835,409.841,343.156,420.036],"Rotation":0},{"Text":"(b)","TextBB":[280.476,422.531,296.039,433.601],"Rotation":0},{"Text":"DSI","TextBB":[299.969,422.531,319.706,433.601],"Rotation":0},{"Text":"Index","TextBB":[323.636,422.531,352.184,433.601],"Rotation":0},{"Text":"Table","TextBB":[356.313,422.531,384.695,433.601],"Rotation":0}],"Mention":["DSI Index Table We represent the DSI index using the\nDSI index table. It stores the mapping between the tags\n(in encrypted format, if the element was encrypted) and\ntheir DSI index entries. We chose one-time-pad encryption\nscheme (a.k.a. Vernam cipher) [15] for the tag encryption,\nbecause of its perfect security property. Note that simply\nstoring all intervals reveals too much information to the\nserver. Thus we do the following: for those adjacent nodes\nthat are of the same tag and are encrypted in the same block,\nwe group their intervals into one by using the lower bound of\nthe left-most node as the lower bound, and the upper bound\nof the right-most node as the upper bound. For example,\ntwo adjacent nodes \u201Cpolicy#\u201D in block 2 (Figure 2) will be\nrepresented by a single interval [0.399, 0.433]. Figure 4 (b)\nshows the DSI index table of the instance in Figure 2.\nNote that if the same grouping technique is applied on a\nset of sibling nodes when a continuous indexing scheme such\nas in [4] is used, the grouping may cause discontinuity of the\nindex and the server consequently may find out the existence\nof grouping, and further possibly the exact structure of the\ntree. An example to show such information leakage on the\ncontinuous index is shown in [26]. Compared with continu-\nous index, by looking at the indices in the DSI interval table,\nthe server cannot decide whether there exist groupings be-\n","hind the intervals, or how many elements have been grouped\ntogether. E.g., by looking at the entry \u201CU84573\u201D with DSI\nindex [0.16, 0.2] in DSI index table (Figure 4 (b)), which\ncorresponding to the SSN node in the block 1 in Figure 2,\nthe server cannot decide whether [0.16, 0.2] represents one\nnode or multiple nodes that have been grouped together.\nEncryption Block Table: In addition to the DSI index de-\nscribed above, we also keep auxiliary information on the en-\ncrypted blocks. Specifically, for each encrypted block, which\nis essentially a subtree, we call the interval of the subtree\nroot, the representative interval of the block. Thus, we main-\ntain a mapping between representative intervals and block\nIDs. The block IDs can be viewed as a pointer to the phys-\nical location of the encrypted blocks in the database. This\nmapping is also represented as a table, called the encryp-\ntion block table. E.g., for our running example of Figure 2,\nthe DSI index table as well as the encryption block table is\nshown in Figure 4.\n","answered the query by the following steps:\nStep 1: Translation of Query Structure: The server\nfirst obtains index entries associated with each query node\ntype by consulting the DSI index table. Note that some\nnodes may have a tag which is encrypted. E.g., the inter-\nvals [0.16, 0.2] & [0.55, 0.596] will be returned by retrieving\n\u201CU84573\u201D (the encrypted value of query node \u201CSSN\u201D) from\nthe DSI index table (Figure 4(b)). We call the interval(s)\nof the distinguished (i.e., query answer) node distinguished\ninterval(s).\nOnce query nodes have lists of intervals associated with\nthem, the server computes any of the standard structural\njoin algorithms to prune away intervals that do not match\nstructural constraints of the query. The remaining intervals\nrepresent tuples of nodes that satisfy the structural con-\nstraints of the query.\nStep 2: Translation of Value-based Constraints: Each\nvalue-based constraint can be treated as a triple <tag, op,\nvalue>, where op ∈ <, >, ≤, ≥, =}. Here tag and value are\nboth in encrypted format. Each value-based constraint is\ntranslated as a range query. This is necessary because of the\nsplitting that was applied before encryption. Figure 7(a)\nshows how each value-based constraint is translated into cor-\nresponding range query on the B-tree index. The server re-\ntrieves the index entries from a B-tree index, corresponding\nto entries that match the triple. Recall that these index en-\ntries correspond to encrypted blocks. So for the value-based\nconstraint @coverage>100000, the server retrieves the entry\npointing to block 2.\nStep 3: Obtaining Final Results: Step 1 yields index\nentries (intervals) corresponding to the distinguished node\nof the query, while step 2 yields index entries associated\nwith encrypted blocks. In this final step, the server com-\nputes a final set of structural joins to determine the subset\nof encryption block id\u2019s that contain the distinguished node\nintervals. The resulting set of block id\u2019s are used to fetch\nthe blocks from the encrypted database enc(D), which are\nthen shipped to the client. In our example, block 1 will be\nreturned to the client.\n"],"Page":7,"Number":4,"Type":"Figure","CaptionBB":[174,444,305,458],"Height":1100,"Width":850,"DPI":100,"ImageBB":[85,342,400,435]}