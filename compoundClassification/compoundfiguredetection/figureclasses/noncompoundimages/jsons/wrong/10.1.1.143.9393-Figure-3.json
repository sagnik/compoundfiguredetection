{"Caption":"Figure 3: Outline of the visual hull modeling techniques chosen for parallelization. (a) Images of an object are taken, silhouettes are identified, their contours vectorized, and viewing edges are computed for each point of the discretization. (b) The hybrid method computes the Delaunay tetrahedron decomposition of space based on viewing edge vertices. (c) Each tetrahedron is carved according to silhouette consistency, and the final visual hull model is obtained. (d) The exact connectivity method computes the cone intersection components belonging to the visual hull, to complete the entire visual hull polyhedron mesh. (e) Faces are extracted from the mesh representation and the final polyhedron model of the visual hull is obtained. ","ImageText":[{"Text":"(a)","TextBB":[246.401,120.071,265.957,135.233],"Rotation":0},{"Text":"(b)","TextBB":[446.727,115.412,466.283,130.573],"Rotation":0},{"Text":"(c)","TextBB":[656.371,115.412,674.988,130.573],"Rotation":0},{"Text":"(d)","TextBB":[449.058,229.552,468.614,244.714],"Rotation":0},{"Text":"(e)","TextBB":[661.032,229.552,679.649,244.714],"Rotation":0},{"Text":"Hybrid","TextBB":[320.94,196.565,360.534,209.2],"Rotation":0},{"Text":"Method","TextBB":[364.028,196.565,406.726,209.2],"Rotation":0},{"Text":"Exact","TextBB":[309.293,238.494,341.117,251.129],"Rotation":0},{"Text":"Connectivity","TextBB":[344.611,238.494,415.261,251.129],"Rotation":0},{"Text":"Method","TextBB":[334.916,257.129,377.613,269.763],"Rotation":0},{"Text":"Step","TextBB":[139.25,343.316,163.317,355.95],"Rotation":0},{"Text":"1:","TextBB":[166.811,343.316,178.453,355.95],"Rotation":0},{"Text":"Viewing","TextBB":[181.947,343.316,227.761,355.95],"Rotation":0},{"Text":"Edges","TextBB":[231.255,343.316,265.413,355.95],"Rotation":0},{"Text":"Step","TextBB":[472.343,343.316,496.41,355.95],"Rotation":0},{"Text":"2","TextBB":[499.904,343.316,506.892,355.95],"Rotation":0},{"Text":"Step","TextBB":[598.136,340.986,622.203,353.621],"Rotation":0},{"Text":"3:","TextBB":[625.697,340.986,637.339,353.621],"Rotation":0},{"Text":"Surface","TextBB":[640.834,340.986,683.531,353.621],"Rotation":0},{"Text":"extraction","TextBB":[687.025,340.986,743.699,353.621],"Rotation":0}],"Mention":["Three steps are used to achieve the reconstruction goal in\nboth cases, as depicted in figure 3. The first step, common\nto both methods, computes an initial subset of the visual\nhull geometry, the viewing edges, in the form of points and\nedges located on the viewing lines of each discrete silhou-\nette contour point (details follow in 3.2). The second step\u2019s\ncommon goal is to compute an intermediate representation\nwhich implicitely contains the visual hull surface. To this\ngoal, the hybrid method partitions space into convex cells,\nwhich can easily be carved according to silhouette consis-\ntency of their projection in images. In contrast, the exact\nconnectivity method computes the exact visual hull polyhe-\ndron as a generalized cone intersection. Finally, the third\nstep\u2019s common goal is to identify the underlying surface in-\nformation, by extracting the visual hull interface polygons\nfrom the previous representation. The following sections\ngive more details about these steps.\n","In order to offer a broad view of the parallelization of\nsilhouette-based approaches, we will focus on two of the\nmost recent methods, the hybrid method [Boyer03], which\noffers a robust trade-off between volume and surface-based\napproaches, and one of the available surface-based meth-\nods, the exact connectivitymethod [Franco03]. See figure 3\nfor an overview. Recall the context of such methods: n cal-\n","We now describe the computation of viewing edges at dis-\ncrete image contour vertices, as it is a common processing\nstep in the presented methods (see fig. 3).\nViewing edges are intervals along viewing lines. They\ncorrespond to viewing lines contributions to the visual hull\nsurface and are thus associated to image points on silhou-\nette contours. As such, viewing edges are simply obtained\nby computing the set of intervals along a viewing line that\nproject inside all silhouettes (see fig. 4).\n","We will now describe the parallelization of the hybrid\nmethod [Boyer03]. After computing the viewing edges, the\nhybrid method uses a Delaunay triangulation of the view-\ning edge vertices to obtain a decomposition of space into\ntetrahedrons, as a second step (see fig. 3). The union of\nthese tetrahedrons form the convex hull of the input points:\nsome of them must be carved in order to isolate the visual\nhull. The discretization consists of convex cells of a more\ngeneralized and flexible shape than regular voxels, but can\nstill be carved with voxel-like silhouette consistency checks\nsuch as those in [Cheung00]. This is used in the third step\nto determine which tetrahedrons lie inside or outside the vi-\nsual hull, and the surface polygons are extracted from this\nmodel by simply isolating the triangles which lie at the in-\nterface between the two regions.\n","ity method [Franco03] (overview available in figure 3). Fig-\nure 5 provides a representation of all geometric entities in-\nvolved.\n"],"Page":4,"Number":3,"Type":"Figure","CaptionBB":[79,369,768,459],"Height":1100,"Width":850,"DPI":100,"ImageBB":[88,105,762,358]}