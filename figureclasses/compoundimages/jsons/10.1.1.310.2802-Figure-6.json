{"Caption":"Figure 6: SPARQL rewriting vs. SQL expansion","ImageText":[{"Text":"OSQR","TextBB":[159.146,274.987,188.596,284.237],"Rotation":0},{"Text":"SQL","TextBB":[200.422,274.987,220.432,284.237],"Rotation":0},{"Text":"800","TextBB":[94.3804,298.398,111.06,307.648],"Rotation":0},{"Text":"600","TextBB":[94.3804,316.263,111.06,325.513],"Rotation":0},{"Text":"400","TextBB":[94.3804,334.127,111.06,343.377],"Rotation":0},{"Text":"200","TextBB":[94.3804,351.992,111.06,361.242],"Rotation":0},{"Text":"0","TextBB":[105.5,369.856,111.06,379.106],"Rotation":0},{"Text":"10","TextBB":[116.854,376.341,127.974,385.591],"Rotation":0},{"Text":"12","TextBB":[137.792,376.341,148.912,385.591],"Rotation":0},{"Text":"14","TextBB":[158.729,376.341,169.849,385.591],"Rotation":0},{"Text":"16","TextBB":[179.667,376.341,190.787,385.591],"Rotation":0},{"Text":"18","TextBB":[200.604,376.341,211.724,385.591],"Rotation":0},{"Text":"20","TextBB":[221.542,376.341,232.662,385.591],"Rotation":0},{"Text":"Max|CandV|","TextBB":[144.824,385.147,204.608,395.264],"Rotation":0},{"Text":"600","TextBB":[258.14,281.809,274.82,291.059],"Rotation":0},{"Text":"SQR","TextBB":[289.261,274.987,310.931,284.237],"Rotation":0},{"Text":"OSQR","TextBB":[322.907,274.987,352.357,284.237],"Rotation":0},{"Text":"SQL","TextBB":[364.182,274.987,384.192,284.237],"Rotation":0},{"Text":"450","TextBB":[258.14,303.814,274.82,313.064],"Rotation":0},{"Text":"300","TextBB":[258.14,325.82,274.82,335.07],"Rotation":0},{"Text":"150","TextBB":[258.14,347.826,274.82,357.076],"Rotation":0},{"Text":"0","TextBB":[269.261,369.856,274.821,379.106],"Rotation":0},{"Text":"10","TextBB":[281.083,376.341,292.203,385.591],"Rotation":0},{"Text":"12","TextBB":[302.958,376.341,314.078,385.591],"Rotation":0},{"Text":"14","TextBB":[324.807,376.341,335.927,385.591],"Rotation":0},{"Text":"16","TextBB":[346.682,376.341,357.802,385.591],"Rotation":0},{"Text":"18","TextBB":[368.532,376.341,379.652,385.591],"Rotation":0},{"Text":"Max|CandV|","TextBB":[311.369,385.147,371.154,395.264],"Rotation":0},{"Text":"20","TextBB":[390.407,376.341,401.527,385.591],"Rotation":0},{"Text":"(a)","TextBB":[63.4999,402.736,77.6447,412.412],"Rotation":0},{"Text":"Rewritten","TextBB":[81.4876,402.736,129.576,412.412],"Rotation":0},{"Text":"queries","TextBB":[132.965,402.736,166.844,412.412],"Rotation":0},{"Text":"over","TextBB":[170.294,402.736,190.275,412.412],"Rotation":0},{"Text":"max","TextBB":[193.951,402.736,214.421,412.412],"Rotation":0},{"Text":"CandV","TextBB":[218.168,402.736,247.197,412.421],"Rotation":0},{"Text":"(b)","TextBB":[249.667,402.736,264.483,412.412],"Rotation":0},{"Text":"Eval.","TextBB":[268.159,402.736,292.612,412.412],"Rotation":0},{"Text":"time","TextBB":[297.479,402.736,319.054,412.412],"Rotation":0},{"Text":"over","TextBB":[322.634,402.736,342.615,412.412],"Rotation":0},{"Text":"max","TextBB":[346.291,402.736,366.76,412.412],"Rotation":0},{"Text":"CandV","TextBB":[370.5,402.736,399.529,412.421],"Rotation":0},{"Text":"SQR","TextBB":[125.5,274.987,147.17,284.237],"Rotation":0},{"Text":"1000","TextBB":[88.8075,280.534,111.048,289.784],"Rotation":0},{"Text":"Time","TextBB":[246.408,336.301,256.525,360.604],"Rotation":3},{"Text":"(Seconds)","TextBB":[246.408,283.418,256.525,333.26],"Rotation":3},{"Text":"Num.","TextBB":[77.0742,339.579,87.1914,365.708],"Rotation":3},{"Text":"of","TextBB":[77.0742,327.416,87.1914,336.538],"Rotation":3},{"Text":"rewritings","TextBB":[77.0742,277.585,87.1914,324.376],"Rotation":3}],"Mention":["populating pairs of instances of templates V3 and V4 from\nthe same department, we make sure they join. Figure 6\n","It is interesting to see what are the effects of each opti-\nmization in isolation, to the size of the rewriting and the\nevaluation time of the rewritten query. In the next three ex-\nperiments we investigate exactly this, starting here with an\nexperiment that studies the effects of optimizing individual\nrewritings (presented in Section 3.1). To this end, we switch\noff in OSQR all other optimizations but merging views (de-\nnoted as OSQR-M) and compare it with SQR. In terms of\nthe experimental setup, this is shown in Figure 7. We de-\nfine 6 views over our base data, with each view exposing\nsome aspect of a student\u2019s data (e.g., email, phone). As for\nthe queries, we execute 6 different queries, with each query\nincreasingly bringing together data from the views. The re-\nturn values and predicates of the query executed in iteration\ni are marked appropriately in Figure 7(b). Figure 8 shows\nthe results of the comparison between SQR and OSQR-M,\nas the input query size increases. Figure 8(a) shows that\nboth algorithms result in the same number of rewritings;\nnote that merging does not influence the number of gener-\nated rewritings (this is the focus of the other optimizations).\nMerging optimizes each individual rewriting, and this be-\ncomes apparent in the evaluation time of the rewritings (see\nFigure 8(b)). As the size of query |Q| increases, so is the po-\ntential for merging views (the same view might appear in the\ncandidate view set of more predicates), which is confirmed in\nFigure 8(b) \u2014 savings in evaluation time of OSQR-M, com-\npared to SQR, start from 10% to 70% for queries with 2 to 5\npredicates. As |Q| increases, so is the size of each rewriting\n(since the rewriting ultimately integrates the where clauses\nof candidate views). In our experiments, when a (rewritten)\nquery has approximately 16 predicates, the engine of 4store\ncrashes, therefore, it is impossible to execute a rewriting\nfrom SQR when |Q| â‰¥ 6. Since merging results in smaller\nrewritings, OSQR-M can handle larger input queries.\n","Using the same query and view definitions, we have run\nexactly the same set of experiments on Jena TDB, to demon-\nstrate the flexibility and the store-independent property of\nour algorithms. In general, the results from Jena TDB are\nhighly consistent with our observations from 4store. As is\nevident from Figure 12, the overall performance in Jena\nTDB of OSQR is several orders of magnitude better than\nthe SQR in the first experiment using the setup in Figure 3.\nThe situation is similar when using the experimental setup\nof Figure 5 and the results are shown in Figure 13. These\ntrends are highly consistent with what we have already ob-\nserved from their comparison in 4store (Figures 4 and 6,\nrespectively). In Appendix G.2, we report results from the\nwhole set of experiments on Jena TDB.\n","Using the same query and view definitions, we have run\nexactly the same set of experiments in 4store from Section 4\non Jena TDB, to demonstrate the flexibility and the store-\nindependent property of our algorithms. In general, the re-\nsults from Jena TDB are highly consistent with our observa-\ntions from 4store, that the various optimization techniques\nwe introduced in OSQR have significantly improved the ef-\nficiency of the baseline approach, Algorithm SQR. In par-\nticular, the overall performance of OSQR is several orders of\nmagnitude better than the SQR in the \u201CCombining all opti-\nmizations\u201D experiment in Jena TDB as well, as evident from\nFigure 16. In the natural setting with the more representa-\ntive query and view definitions as discussed in the last exper-\niment in Section 4, OSQR also consistently outperforms SQR\nin Jena TDB by more than one order of magnitude (Figure\n17). These trends are highly consistent with what we have\n","already observed from their comparison in 4store (Figures 4\nand 6 in Section 4).\nThe comparison for the individual optimization techniques\n(SQR vs. OSQR-M with merger in Figure 18, SQR vs. OSQR-P\nwith pruning of empty results in Figure 19, and SQR vs.\nOSQR-R with reordering in Figure 20) in Jena TDB are also\nconsistent with the observations from 4store, showing the\nbenefit of the individual optimization components we have\ndesigned. The only exception is the running time compari-\nson between SQR and OSQR-M in Jena TDB in Figure 18(b).\nWe do not observe a significant difference between the two,\nin comparison to the result from 4store in Figure 8. We artic-\nulate that Jena TDB query engine implements some form of\nmerging (which is not available in 4store) and therefore the\nperformance of SQR and OSQR-M is similar in this case. Nev-\nertheless, Jena TDB has neither detection of empty rewrit-\nings, nor does it re-order predicates for efficient pruning of\nempty rewritings, and therefore the remaining figures show\nidentical trends with 4store.\nThe pleasant surprise by the difference between 4store and\nJena TDB with regard to the merger optimization reinforces\nthe importance of our store-independent design principle.\nIn summary, our ultimate solution for SPARQL query rewiring\nover multiple views, Algorithm OSQR, exhibits superior effi-\nciency and robustness in practice. Our extensive experimen-\ntal results from two popular RDF stores convincingly and\nconsistently show that OSQR has good efficiency in practice,\nfrom rewriting to the end of query execution, over tens to\nhundred of views in RDF stores with 10 million triples.\n"],"Page":8,"Number":6,"Type":"Figure","CaptionBB":[82,425,397,439],"Height":1100,"Width":850,"DPI":100,"ImageBB":[62,268,410,415]}