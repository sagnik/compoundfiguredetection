{"Caption":"Figure 7: Performance scaling with increasing memory latency. The y-axis shows performance relative to the pseudo-ideal SCALE configu- ration (with 8 B\/cycle memory). In (b), the processor frequency is increased by 4× while retaining the same memory system. ","ImageText":[{"Text":"1","TextBB":[145.985,126.9,151.623,136.348],"Rotation":0},{"Text":"4","TextBB":[412.212,126.445,417.859,135.842],"Rotation":0},{"Text":"0.75","TextBB":[131.886,168.5,151.616,177.948],"Rotation":0},{"Text":"3","TextBB":[412.212,167.821,417.859,177.218],"Rotation":0},{"Text":"0.5","TextBB":[137.536,210.154,151.629,219.601],"Rotation":0},{"Text":"2","TextBB":[412.212,209.25,417.859,218.646],"Rotation":0},{"Text":"0.25","TextBB":[131.886,251.754,151.616,261.202],"Rotation":0},{"Text":"1","TextBB":[412.212,250.625,417.859,260.022],"Rotation":0},{"Text":"0","TextBB":[145.985,293.407,151.623,302.855],"Rotation":0},{"Text":"4","TextBB":[150.632,300.908,156.27,310.356],"Rotation":0},{"Text":"25","TextBB":[180.679,300.908,191.953,310.356],"Rotation":0},{"Text":"50","TextBB":[213.524,300.908,224.799,310.356],"Rotation":0},{"Text":"100","TextBB":[243.518,300.908,260.43,310.356],"Rotation":0},{"Text":"200","TextBB":[276.364,300.908,293.275,310.356],"Rotation":0},{"Text":"400","TextBB":[309.209,300.908,326.121,310.356],"Rotation":0},{"Text":"memory","TextBB":[197.577,311.334,234.188,320.782],"Rotation":0},{"Text":"latency","TextBB":[237.007,311.334,269.126,320.782],"Rotation":0},{"Text":"(cycles)","TextBB":[271.945,311.334,306.863,320.782],"Rotation":0},{"Text":"800","TextBB":[342.107,300.908,359.019,310.356],"Rotation":0},{"Text":"0","TextBB":[412.212,292.054,417.859,301.451],"Rotation":0},{"Text":"16","TextBB":[414.063,299.514,425.358,308.911],"Rotation":0},{"Text":"vvadd−word","TextBB":[648.589,124.805,703.633,134.202],"Rotation":0},{"Text":"vvadd−byte","TextBB":[648.589,136.498,700.82,145.895],"Rotation":0},{"Text":"vvadd−cmplx","TextBB":[648.589,148.191,708.143,157.587],"Rotation":0},{"Text":"vertex","TextBB":[648.589,159.883,676.248,169.28],"Rotation":0},{"Text":"fir","TextBB":[648.589,171.576,657.05,180.973],"Rotation":0},{"Text":"transpose400","TextBB":[648.589,183.269,710.134,192.666],"Rotation":0},{"Text":"transpose512","TextBB":[648.589,194.962,710.134,204.358],"Rotation":0},{"Text":"idct","TextBB":[648.589,206.654,664.394,216.051],"Rotation":0},{"Text":"rgbyiq","TextBB":[648.589,218.347,676.248,227.744],"Rotation":0},{"Text":"rgbcmyk","TextBB":[648.589,230.04,686.965,239.437],"Rotation":0},{"Text":"hpg","TextBB":[648.589,241.732,665.532,251.129],"Rotation":0},{"Text":"fft","TextBB":[648.589,253.425,657.061,262.822],"Rotation":0},{"Text":"rotate","TextBB":[648.589,265.118,674.562,274.515],"Rotation":0},{"Text":"dither","TextBB":[648.589,276.811,673.993,286.207],"Rotation":0},{"Text":"100","TextBB":[444.113,299.514,461.056,308.911],"Rotation":0},{"Text":"200","TextBB":[477.02,299.514,493.963,308.911],"Rotation":0},{"Text":"400","TextBB":[509.926,299.514,526.869,308.911],"Rotation":0},{"Text":"800","TextBB":[542.833,299.514,559.776,308.911],"Rotation":0},{"Text":"1600","TextBB":[572.936,299.514,595.526,308.911],"Rotation":0},{"Text":"memory","TextBB":[463.899,309.884,500.579,319.281],"Rotation":0},{"Text":"latency","TextBB":[503.402,309.884,535.582,319.281],"Rotation":0},{"Text":"(cycles)","TextBB":[538.406,309.884,573.388,319.281],"Rotation":0},{"Text":"3200","TextBB":[605.895,299.514,628.486,308.911],"Rotation":0}],"Mention":["with memory latency and processor frequency. Table 3 shows\nthe configuration parameters, and Figure 7a shows how per-\nformance scales as the latency of the 8B\/cycle main mem-\nory increases from 4 to 800 cycles. To tolerate the increas-\ning memory bandwidth-delay product, only the Vector-CmdQ\nsize, the number of primary miss tags, and the distance-sets\nwere scaled linearly with the memory latency. We found it un-\nnecessary to scale the number of primary miss tags per bank\nbetween the 50 and 100 cycle latency configurations because\napplications tend to use these hard-partitioned cache bank re-\nsources more uniformly as their number increases.\nAs shown in Figure 7a, eight of the benchmarks are able\nto maintain essentially full throughput as the memory la-\ntency increases. This means that the amount of in-flight\ndata reaches each benchmark\u2019s achievable memory band-\nwidth (Table 1) multiplied by 800 cycles\u2014up to 6.25KB. The\nperformance for benchmarks which lack sufficient structured\naccess parallelism (dither and fft) tapers as the memory\nlatency increases beyond their latency tolerance. hpg perfor-\nmance drops off due to the cache\u2019s FIFO eviction policy, and\ntranspose512 can not tolerate the long latencies since the\nrefill distance is limited to the size of one set.\nIn Figure 7b, we evaluate the effect of increasing the pro-\ncessor clock frequency by 4× such that the memory latency\nalso increases by 4× and the bandwidth becomes 2B\/cycle.\nWe retain the same parameters listed in Table 3 for operat-\ning points with equal bandwidth-delay products. The results\nshow that the benchmarks which were limited by memory at\n8B\/cycle still attain the same performance, while those which\nwere previously limited by compute or cache bandwidth im-\nprove with the increased frequency.\n"],"Page":11,"Number":7,"Type":"Figure","CaptionBB":[74,327,775,356],"Height":1100,"Width":850,"DPI":100,"ImageBB":[130,119,718,323]}