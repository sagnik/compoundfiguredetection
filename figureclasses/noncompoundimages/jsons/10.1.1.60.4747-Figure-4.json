{"Caption":"Figure 4. Account example, modified for the multithreaded methodology of Section 3. ","ImageText":[{"Text":"class","TextBB":[441.65,117.241,473.435,129.529],"Rotation":0},{"Text":"Account","TextBB":[476.89,117.241,524.657,129.529],"Rotation":0},{"Text":"{","TextBB":[529.429,116.466,536.348,129.529],"Rotation":0},{"Text":"rep","TextBB":[455.486,133.845,478.18,146.133],"Rotation":0},{"Text":"IntList","TextBB":[481.633,133.845,522.523,146.133],"Rotation":0},{"Text":"hist","TextBB":[527.297,133.845,548.856,146.133],"Rotation":0},{"Text":":=","TextBB":[552.482,133.845,567.094,146.133],"Rotation":0},{"Text":"new","TextBB":[570.931,133.845,598.564,146.133],"Rotation":0},{"Text":"IntList()","TextBB":[602.237,133.845,655.203,146.133],"Rotation":0},{"Text":";","TextBB":[659.05,133.845,662.897,146.133],"Rotation":0},{"Text":"int","TextBB":[455.486,150.45,474.485,162.737],"Rotation":0},{"Text":"bal","TextBB":[477.953,150.45,494.226,162.737],"Rotation":0},{"Text":":=","TextBB":[497.954,150.45,512.567,162.737],"Rotation":0},{"Text":"0","TextBB":[516.4,150.45,523.318,162.737],"Rotation":0},{"Text":";","TextBB":[527.165,150.45,531.012,162.737],"Rotation":0},{"Text":"invariant","TextBB":[455.486,167.054,516.842,179.341],"Rotation":0},{"Text":"bal","TextBB":[520.308,167.054,536.581,179.341],"Rotation":0},{"Text":"=","TextBB":[541.849,167.054,552.614,179.341],"Rotation":0},{"Text":"i:","TextBB":[571.06,174.086,578.612,182.687],"Rotation":0},{"Text":"0≤i<hist.count","TextBB":[582.07,174.086,658.398,182.687],"Rotation":0},{"Text":"hist.elems[i","TextBB":[662.296,167.054,731.49,179.341],"Rotation":0},{"Text":"]","TextBB":[732.894,167.054,736.741,179.341],"Rotation":0},{"Text":";","TextBB":[740.588,167.054,744.435,179.341],"Rotation":0},{"Text":"void","TextBB":[455.486,201.229,484.656,213.516],"Rotation":0},{"Text":"Deposit(int","TextBB":[488.119,201.229,558.559,213.516],"Rotation":0},{"Text":"amount)","TextBB":[562.025,201.229,613.983,213.516],"Rotation":0},{"Text":"requires","TextBB":[469.324,217.833,524.964,230.121],"Rotation":0},{"Text":"owner","TextBB":[528.411,217.833,564.665,230.121],"Rotation":0},{"Text":"=","TextBB":[569.989,217.833,580.754,230.121],"Rotation":0},{"Text":"tid","TextBB":[584.594,217.833,604.05,230.121],"Rotation":0},{"Text":"∧","TextBB":[610.578,217.058,619.807,230.121],"Rotation":0},{"Text":"inv","TextBB":[622.876,217.833,641.266,230.121],"Rotation":0},{"Text":";","TextBB":[646.597,217.833,650.444,230.121],"Rotation":0},{"Text":"ensures","TextBB":[469.324,234.438,520.702,246.726],"Rotation":0},{"Text":"bal","TextBB":[524.157,234.438,540.43,246.726],"Rotation":0},{"Text":"=","TextBB":[545.696,234.438,556.461,246.726],"Rotation":0},{"Text":"old(bal","TextBB":[560.301,234.438,603.172,246.726],"Rotation":0},{"Text":")","TextBB":[604.594,234.438,609.977,246.726],"Rotation":0},{"Text":"+","TextBB":[613.049,234.438,623.815,246.726],"Rotation":0},{"Text":"amount","TextBB":[626.887,234.438,672.15,246.726],"Rotation":0},{"Text":";","TextBB":[677.306,234.438,681.152,246.726],"Rotation":0},{"Text":"{","TextBB":[455.486,250.268,462.405,263.33],"Rotation":0},{"Text":"unpack","TextBB":[469.324,267.647,518.613,279.934],"Rotation":0},{"Text":"(this)","TextBB":[522.76,267.647,559.248,279.934],"Rotation":0},{"Text":";","TextBB":[563.095,267.647,566.942,279.934],"Rotation":0},{"Text":"hist.Add","TextBB":[469.324,284.251,519.767,296.539],"Rotation":0},{"Text":"(amount)","TextBB":[521.203,284.251,578.541,296.539],"Rotation":0},{"Text":";","TextBB":[582.388,284.251,586.235,296.539],"Rotation":0},{"Text":"bal","TextBB":[469.324,300.855,485.597,313.143],"Rotation":0},{"Text":":=","TextBB":[489.325,300.855,503.937,313.143],"Rotation":0},{"Text":"bal","TextBB":[507.775,300.855,524.048,313.143],"Rotation":0},{"Text":"+","TextBB":[528.546,300.855,539.311,313.143],"Rotation":0},{"Text":"amount","TextBB":[542.382,300.855,587.644,313.143],"Rotation":0},{"Text":";","TextBB":[592.801,300.855,596.648,313.143],"Rotation":0},{"Text":"pack","TextBB":[469.324,317.459,500.928,329.747],"Rotation":0},{"Text":"(this)","TextBB":[505.079,317.459,541.568,329.747],"Rotation":0},{"Text":";","TextBB":[545.414,317.459,549.261,329.747],"Rotation":0},{"Text":"}","TextBB":[455.486,333.29,462.405,346.353],"Rotation":0},{"Text":"void","TextBB":[455.486,367.273,484.656,379.561],"Rotation":0},{"Text":"Transaction(int","TextBB":[488.118,367.273,585.166,379.561],"Rotation":0},{"Text":"amount)","TextBB":[588.633,367.273,640.591,379.561],"Rotation":0},{"Text":"{","TextBB":[644.049,366.498,650.967,379.561],"Rotation":0},{"Text":"acquire","TextBB":[469.324,383.877,519.637,396.165],"Rotation":0},{"Text":"(this)","TextBB":[523.096,383.877,559.584,396.165],"Rotation":0},{"Text":";","TextBB":[563.431,383.877,567.278,396.165],"Rotation":0},{"Text":"Deposit(amount)","TextBB":[469.324,400.481,572.722,412.769],"Rotation":0},{"Text":";","TextBB":[576.569,400.481,580.415,412.769],"Rotation":0},{"Text":"release","TextBB":[469.324,417.086,516.191,429.373],"Rotation":0},{"Text":"(this)","TextBB":[519.647,417.086,556.137,429.373],"Rotation":0},{"Text":";","TextBB":[559.984,417.086,563.831,429.373],"Rotation":0},{"Text":"}","TextBB":[455.486,432.916,462.405,445.979],"Rotation":0},{"Text":"}","TextBB":[441.65,449.52,448.569,462.583],"Rotation":0}],"Mention":["Now let us extend our running example, so that we can\nverify it in a multithreaded environment. We have to make\nsure that Account objects are accessed only when they are\nowned by the current thread. Figure 44 illustrates two ways\nto achieve this, known as client-side locking and provider-\nside locking. Client-side locking, exemplified by method\nDeposit , means that responsibility of exclusion is relegated\nto the client. We indicate this by including the requirement\nowner = tid in the precondition. A program is allowed to\nmention the owner field only in the form o.owner = tid\nand only in method contracts.\n","The methodology guarantees that Program Invariant 2\nholds in each state. This invariant can therefore be assumed\nby a static program verifier at any point in the program.\nThe absence of data races implies that the values read by\na thread are stable with respect to other threads. That is,\nas long as an object remains in the thread\u2019s ownership do-\nmain, the fields of the object are controlled exactly in the\nsame way that fields of objects are controlled in a sequen-\ntial program. Therefore, static verification proceeds as for a\nsequential program.\nFor objects outside the thread\u2019s ownership domain, all\nbets are off (as we alluded to in the discussion of the\nTransaction method in Figure 4). But since a thread cannot\nread fields of such objects, static verification is unaffected\nby the values of those fields.\nWhen an object o enters a thread\u2019s ownership domain,\nwe know that the invariants of all objects in o\u2019s owner-\nship domain hold. In particular, due to our non-reentrant\nacquire statement and the third component of Program In-\nvariant 2, we have o.inv . To model the intervention of other\nthreads between exclusive regions, a static verifier plays\n"],"Page":5,"Number":4,"Type":"Figure","CaptionBB":[444,492,741,523],"Height":1100,"Width":850,"DPI":100,"ImageBB":[440,113,746,465]}