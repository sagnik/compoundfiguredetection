{"Caption":"Figure 1. Weights and parallelism: the par- allel comnposition (1a), and, assuming that A ∧ X is unfeasible, the product solution (1b) and the arbiter solution (1c). ","ImageText":[{"Text":"A\/a","TextBB":[110.282,124.755,124.935,131.636],"Rotation":0},{"Text":"B","TextBB":[146.724,124.755,152.93,131.636],"Rotation":0},{"Text":"B","TextBB":[327.094,116.731,333.301,123.612],"Rotation":0},{"Text":"∧","TextBB":[335.515,116.298,341.001,123.612],"Rotation":0},{"Text":"X\/x","TextBB":[342.834,116.731,358.277,123.612],"Rotation":0},{"Text":"A","TextBB":[271.973,117.344,278.141,124.225],"Rotation":0},{"Text":"∧","TextBB":[279.969,116.91,285.455,124.225],"Rotation":0},{"Text":"Y","TextBB":[287.287,117.344,292.061,124.225],"Rotation":0},{"Text":"\/a","TextBB":[292.975,117.344,301.46,124.225],"Rotation":0},{"Text":"Y","TextBB":[204.908,124.755,209.681,131.636],"Rotation":0},{"Text":"X\/x","TextBB":[169.385,125.061,184.828,131.942],"Rotation":0},{"Text":"B","TextBB":[289.122,132.656,295.329,139.536],"Rotation":0},{"Text":"∧","TextBB":[297.543,132.222,303.029,139.536],"Rotation":0},{"Text":"Y","TextBB":[304.861,132.656,309.634,139.536],"Rotation":0},{"Text":"(b)","TextBB":[308.681,170.273,322.233,180.733],"Rotation":0},{"Text":"(a)","TextBB":[154.667,173.028,167.568,183.489],"Rotation":0},{"Text":"B","TextBB":[188.127,209.581,194.333,216.461],"Rotation":0},{"Text":"X\/x","TextBB":[173.734,228.873,189.177,235.754],"Rotation":0},{"Text":"A\/a","TextBB":[226.1,209.581,240.752,216.461],"Rotation":0},{"Text":"Y","TextBB":[204.357,229.486,209.13,236.367],"Rotation":0},{"Text":"Y","TextBB":[230.692,229.486,235.466,236.367],"Rotation":0},{"Text":"Y","TextBB":[287.652,208.356,292.425,215.236],"Rotation":0},{"Text":"X\/x","TextBB":[249.679,209.581,265.122,216.461],"Rotation":0},{"Text":"B","TextBB":[257.948,230.098,264.154,236.979],"Rotation":0},{"Text":"B","TextBB":[273.872,229.18,280.078,236.06],"Rotation":0},{"Text":"A\/a","TextBB":[298.982,229.486,313.635,236.367],"Rotation":0},{"Text":"(c)","TextBB":[234.593,269.491,247.494,279.951],"Rotation":0}],"Mention":["ority for satisfying stochastic demands. Intuitively, the\ncomponents of a parallel composition are treated se-\nquentially: the first one is perfectly served, according\nto its own local weights, then the second is served ac-\ncording to what was decided by the first one, etc. The\norder of components is, in general non-deterministic,\nand stochastic information may be added to influence\nit. The Figure 1c shows a product where a first fair\nchoice is made to decide which component will \u201Dplay\u201D\nfirst (note that all intermediate states are transient).\n","Weights and parallelism. In terms of control structures,\nparallelism corresponds to a kind of synchronous product of\nautomata. Transient states make this \u201Dproduct\u201D more com-\nplex than a simple Cartesian product, but do not involve big\ndifficulties. For formulas, the product is simply the logi-\ncal and. Unfortunately, there is no obvious way for com-\nbining stochastic information: as they are defined, they are\nonly local information and they may induce paradoxes when\ncombined into a parallel composition. A simple example is\nshown in Figure 1a: the first automaton (resp. the second)\nhas the choice between the constraints A or B (resp. X or\nY ) both satisfiable. In the first automaton, the choice of A\nhas a big weight a >> 1 compared to B (1 by default), and\nin the second,X has a big weight x >> 1 comparing to Y .\nSuppose that the data-state makes it impossible to satisfy\nA∧X , it follows that it is impossible to satisfy the stochas-\ntic demand of both components. There is mainly two ways\nto solve the problem:\n","\u2022 Consider that weights are not only local information,\nbut are also influencing the parallel composition: for\ninstance, if a is much bigger than x, that means that\nthe stochastic demand of the first component is much\nstronger than the one of the second. The simplest way\nto implement this notion is to combine weights with\nmultiplication, as shown in Figure 1b.\n","The second kind of \u201Dproduct\u201D (as shown in Figure 1c)\nis a little bit tricky: the idea is to introduce, for each com-\nponent, an additional starting transient state sˆ and an addi-\ntional waiting transient state s˘ for each stable state s. The\nglobal state space is then defined as the Cartesian product\nover the extended component state spaces. The definition\nof initial and stable global states does not change. The tran-\nsitions are defined in such a way that each component per-\nforms its reaction in turn. We only give the rules where the\nfirst component starts, the other case is similar:\n","Product. First of all, the behavior which is in general ex-\npressed as a a set of concurrent automata, is semantically\nequivalent to the one of a single product automaton. Two\ndifferent products are defined, depending on the semantics\nchosen for weights composition (Figure 1). The simplest\none is almost a classical synchronous product:\n"],"Page":3,"Number":1,"Type":"Figure","CaptionBB":[84,300,381,365],"Height":1100,"Width":850,"DPI":100,"ImageBB":[108,100,360,281]}