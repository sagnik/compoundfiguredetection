{"Caption":"Figure 1: Selections from the JDO API","ImageText":[{"Text":"void","TextBB":[100.871,221.74,127.022,232.113],"Rotation":0},{"Text":"declareImports(String","TextBB":[133.559,221.74,270.851,232.113],"Rotation":0},{"Text":"imports);","TextBB":[277.389,221.74,336.241,232.113],"Rotation":0},{"Text":"void","TextBB":[100.871,236.269,127.022,246.642],"Rotation":0},{"Text":"declareParameters(String","TextBB":[133.559,236.269,290.464,246.642],"Rotation":0},{"Text":"params);","TextBB":[297.015,236.269,349.316,246.642],"Rotation":0},{"Text":"void","TextBB":[100.871,250.798,127.022,261.171],"Rotation":0},{"Text":"declareVariables(String","TextBB":[133.559,250.798,283.927,261.171],"Rotation":0},{"Text":"vars);","TextBB":[290.464,250.798,329.703,261.171],"Rotation":0},{"Text":"Object","TextBB":[100.871,279.855,140.097,290.228],"Rotation":0},{"Text":"execute();","TextBB":[146.635,279.855,212.012,290.228],"Rotation":0},{"Text":"Object","TextBB":[100.871,294.384,140.097,304.758],"Rotation":0},{"Text":"execute(Object","TextBB":[146.635,294.384,238.163,304.758],"Rotation":0},{"Text":"arg1);","TextBB":[244.7,294.384,283.927,304.758],"Rotation":0},{"Text":"Object","TextBB":[100.871,308.914,140.097,319.287],"Rotation":0},{"Text":"executeWithMap(Map","TextBB":[146.635,308.914,264.314,319.287],"Rotation":0},{"Text":"parameters);","TextBB":[270.851,308.914,349.316,319.287],"Rotation":0},{"Text":"\/\/","TextBB":[100.871,323.441,113.946,333.815],"Rotation":0},{"Text":"bookkeeping","TextBB":[120.485,322.408,184.517,333.466],"Rotation":0},{"Text":"methods","TextBB":[189.1,322.408,233.855,333.466],"Rotation":0},{"Text":"not","TextBB":[238.425,322.408,256.394,333.466],"Rotation":0},{"Text":"listed","TextBB":[260.965,322.408,289.394,333.466],"Rotation":0},{"Text":"}","TextBB":[74.7194,336.24,81.1202,347.995],"Rotation":0}],"Mention":["Most query languages support existential quantification\nto test whether any member of a set meets a condition. The\nquery in Figure 10 finds departments whose names begin\nwith a given prefix and have an employee whose salary is\nabove a given minimum. The query uses the exists method\ndefined in the ISafeQuery interface (Figure 3). The first pa-\nrameter defines the extent of quantification, while the sec-\nond parameter is another safe query. The query reuses the\nSalaryLimit query defined in Section 3.2. The approach\nis similar to the use of Boolean-valued functions for mem-\nbership tests in languages with first-class functions: the\ndetect:ifNone: method in Smalltalk [7], or the any func-\ntion in Haskell [14].\nIn JDOQL, existentials are expressed by a nonstandard in-\nterpretation of the contains method as a binding construct.\nC.contains(v) normally tests if a collection C contains the\nvalue of the variable v, but in JDO the form C.contains(v)\n&& P is interpreted to mean âˆƒv.P where P is a predicate\nthat may mention v. The entire form returns true if there\nexists a member of C for which P is true. The variable v\nmust be listed in the string passed to declareVariables.\nThe query in Figure 11 is a hand-written equivalent to\nFigure 10. This query illustrates the kind of complexity\nthat programmers face in writing even fairly simple queries.\nAlthough we define a parameterized query to find employ-\nees whose salary is above a minimum in Section 3.2, reusing\nthis query here would require complex and unsafe string ma-\nnipulation. As in previous examples, after type checking is\ncomplete, the safe query is translated to code that is similar\nto the hand-written form.\n"],"Page":2,"Number":1,"Type":"Figure","CaptionBB":[111,376,368,389],"Height":1169,"Width":827,"DPI":100,"ImageBB":[73,218,349,351]}