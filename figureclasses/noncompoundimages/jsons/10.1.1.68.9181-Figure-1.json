{"Caption":"Figure 1. Three layered architecture of the DSMI","ImageText":[{"Text":"Application","TextBB":[139.667,566.832,206.01,584.649],"Rotation":0},{"Text":"Layer:","TextBB":[209.5,566.832,247.264,584.649],"Rotation":0},{"Text":"Data-Flow","TextBB":[250.833,566.832,312.376,584.649],"Rotation":0},{"Text":"Parser","TextBB":[315.833,566.832,353.537,584.649],"Rotation":0},{"Text":"pub-sub","TextBB":[112.833,595.832,159.07,613.649],"Rotation":0},{"Text":"Middleware","TextBB":[162.667,595.832,230.463,613.649],"Rotation":0},{"Text":"ECho","TextBB":[154.667,611.887,188.403,629.884],"Rotation":0},{"Text":"Resource","TextBB":[260.5,595.832,313.463,613.649],"Rotation":0},{"Text":"Monitoring","TextBB":[317,595.832,382.57,613.649],"Rotation":0},{"Text":"PDS","TextBB":[308.5,611.887,334.676,629.884],"Rotation":0},{"Text":"Underlay","TextBB":[136.833,637.665,189.963,655.482],"Rotation":0},{"Text":"Layer:","TextBB":[193.5,637.665,231.264,655.482],"Rotation":0},{"Text":"Network","TextBB":[234.833,637.665,283.237,655.482],"Rotation":0},{"Text":"Partitioning","TextBB":[286.833,637.665,356.236,655.482],"Rotation":0}],"Mention":["Our distributed stream management infrastructure \n(DSMI) is broadly composed of three layers as shown in \nFigure 1: (1) the Application Layer is responsible for \naccepting and parsing the data composition requests and \nconstructing the data-flow graph, (2) the Middleware \nLayer consists of the ECho middleware and the PDS \nresource-monitoring infrastructure for deployment and \nmaintenance of the stream overlay, and (3) the Underlay \nLayer organizes the nodes into hierarchical partitions that \nare used by the deployment infrastructure. The following \nsubsections briefly describe these three layers.  \n","         Figure 10. Variation of end-to-end delay for                                   Figure 11. Comparison of deployment and  \n         network perturbation and processor overload                                       reconfiguration cost on Emulab nodes \n"," The next experiment was conducted to compare the \ntime for initial deployment and reconfiguration. Figure 11 \nshows that the times are quite small; only a few hundred \nmilliseconds in the worst case. The figure illustrates the \nadvantage of using a pub-sub middleware for deploying \nthe flow graph. The pub-sub channels have to be created \nonly at the time of deployment; reconfiguration just \ninvolves a change in publisher and subscriber to this \nchannel and is therefore even faster. It may also be noted \nthat once the channels for the data-flow graph have been \ncreated, deployment is essentially a distributed process, \nwhich starts once the corresponding nodes receive the \noperator deployment messages. This makes deployment \ntime to increase almost linearly with the number of nodes. \n"],"Page":3,"Number":1,"Type":"Figure","CaptionBB":[106,663,384,683],"Height":1100,"Width":850,"DPI":100,"ImageBB":[94,559,399,664]}