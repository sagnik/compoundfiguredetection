{"Caption":"Figure 1: Executing an aggregation\/join query with a combination of two plans. ","ImageText":[{"Text":"Group[fid,from]","TextBB":[190.241,84.2981,255.195,93.6384],"Rotation":0},{"Text":"max(num)","TextBB":[263.149,90.8239,290.649,96.6844],"Rotation":0},{"Text":"Relations:","TextBB":[104.543,95.81,147.846,105.15],"Rotation":0},{"Text":"Shared","TextBB":[309.195,108.601,340.596,117.941],"Rotation":0},{"Text":"Group-","TextBB":[343.303,108.601,373.613,117.941],"Rotation":0},{"Text":"by","TextBB":[316.23,120.752,326.515,130.092],"Rotation":0},{"Text":"Operator","TextBB":[329.223,120.752,367.655,130.092],"Rotation":0},{"Text":"U","TextBB":[227.974,109.401,243.83,125.916],"Rotation":0},{"Text":"F(fid,from,to,when)","TextBB":[105.183,115.698,164.474,122.474],"Rotation":0},{"Text":"F","TextBB":[143.555,125.936,148.923,134.36],"Rotation":0},{"Text":"0","TextBB":[148.671,125.285,151.644,130.413],"Rotation":0},{"Text":"F","TextBB":[143.555,136.808,148.923,145.233],"Rotation":0},{"Text":"1","TextBB":[148.671,136.158,151.644,141.286],"Rotation":0},{"Text":"T(ssn,flight)","TextBB":[105.183,157.267,142.089,164.044],"Rotation":0},{"Text":"T","TextBB":[125.009,166.227,130.376,174.651],"Rotation":0},{"Text":"0","TextBB":[130.764,166.855,133.738,171.983],"Rotation":0},{"Text":"T","TextBB":[125.009,181.575,130.376,190],"Rotation":0},{"Text":"1","TextBB":[130.764,180.925,133.738,186.053],"Rotation":0},{"Text":"C(parent,num)","TextBB":[104.543,198.837,150.091,205.614],"Rotation":0},{"Text":"0","TextBB":[127.567,210.344,130.54,215.472],"Rotation":0},{"Text":"C","TextBB":[121.171,210.354,127.514,218.779],"Rotation":0},{"Text":"C","TextBB":[121.171,221.227,127.514,229.651],"Rotation":0},{"Text":"1","TextBB":[127.567,220.576,130.54,225.704],"Rotation":0},{"Text":"F","TextBB":[172.974,191.74,178.925,201.08],"Rotation":0},{"Text":"0","TextBB":[180.009,190.591,183.407,196.452],"Rotation":0},{"Text":"C","TextBB":[295.765,191.74,302.797,201.08],"Rotation":0},{"Text":"1","TextBB":[303.439,190.591,306.837,196.452],"Rotation":0},{"Text":"T","TextBB":[192.8,210.926,198.75,220.266],"Rotation":0},{"Text":"0","TextBB":[199.195,210.417,202.593,216.278],"Rotation":0},{"Text":"Plan","TextBB":[185.125,233.949,204.614,243.29],"Rotation":0},{"Text":"0","TextBB":[207.321,233.949,212.737,243.29],"Rotation":0},{"Text":"C","TextBB":[220.3,210.926,227.332,220.266],"Rotation":0},{"Text":"0","TextBB":[227.974,210.417,231.371,216.278],"Rotation":0},{"Text":"F","TextBB":[249.078,210.926,255.029,220.266],"Rotation":0},{"Text":"1","TextBB":[255.474,210.417,258.871,216.278],"Rotation":0},{"Text":"T","TextBB":[275.3,210.926,281.251,220.266],"Rotation":0},{"Text":"1","TextBB":[281.695,210.417,285.093,216.278],"Rotation":0},{"Text":"Stitch-up","TextBB":[336.056,196.856,374.488,206.196],"Rotation":0},{"Text":"Plan","TextBB":[346.288,209.007,365.777,218.348],"Rotation":0},{"Text":"Plan","TextBB":[258.671,233.949,278.16,243.29],"Rotation":0},{"Text":"1","TextBB":[280.868,233.949,286.283,243.29],"Rotation":0}],"Mention":["A major reason for our interest in ADP is the fact it can allow us\nto detect and exploit certain properties (e.g., selectivity, order, and\ngroups) that are discovered to hold within the source data. To illus-\ntrate, we provide three examples in which adaptive data partitioning\ncan allow us to react to the discovery of data source properties.\nOur first example (Figure 1) shows how ADP can recover from\noverly optimistic cardinality estimates by switching between query\nplans in the middle of pipelined execution.\n","Once the optimizer of a traditional query processor has selected\na physical query plan, the system will execute it until completion. In\none use of adaptive data partitioning, the system starts in the same\nway, executing the plan described above (\u201CPhase 0\u201D in Figure 1).\nHowever, the system monitors execution, collecting statistics. From\nthese statistics, the system may determine that it would be better\nto join travelers and flights before children, replacing the original\n","EXAMPLE 2.3. In the query of Example 2.1, if a traveler flies\nmultiple times, the most efficient query plan may resemble that of\nPlan 0 in Figure 1, with an additional pre-aggregation operator\nafter the T 1 C expression (grouping on flight and aggregating\nmax(num)). If a traveler rarely flies, perhaps the original Plan 0\nperforms better.\nWe can use data partitioning as a means of comparing the per-\nformance of the two plans: divide the data up into a series of sub-\nsets (say, k tuples apiece). Feed a few subsets into each of the\nalternative plans; compare performance on those, and then feed\nthe remaining data into the \u201Csuperior\u201D plan.\n","Note that this two-part version of the overall expression exactly\ncorresponds to the example of Figure 1. The two phases in the fig-\nure correspond to our join expressions with matching superscripts;\nthe stitch-up phase performs the final union of combinations. It is\nstraightforward to extend the above properties to include selection\nand projection: both operators easily distribute over union.\n"],"Page":3,"Number":1,"Type":"Figure","CaptionBB":[73,256,407,283],"Height":1100,"Width":850,"DPI":100,"ImageBB":[100,58,377,244]}