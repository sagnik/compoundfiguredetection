{"Caption":"  Figure 4: The DiamondSpin framework can display   Java Swing components at an arbitrary orientation. the availability of multi-user input devices. DiamondSpin provides explicit support to run on DiamondTouch [3], a multi-user, multi-touch input surface with unique user ","ImageText":[],"Mention":["We have designed a mechanism to transform Java Factory \nComponents into DiamondSpin\u2019s polar coordinate system. \nFor example, we have a version of the JComboBox that can \nbe displayed at any orientation, as shown in Figure 4. \nRotation of GUI elements in DiamondSpin is achieved \nthrough replacement of location functions with polar \ncoordinate computation as well as subclassing of existing \nSwing Java classes that require graphical popup \n(DSComboBox, DSMenubar). In addition we provide a \nuseful method to analyze a tree of UI components and \nreplace unwanted non-rotatable elements by our subclassed \ncomponents. We leverage off the efficient affine \ntransformation functions that Java provides.  \n","DSFrame, DSPanel, and DSWindow are subclassed \nequivalents of JFrame, JPanel, and JWindow (with or \nwithout a titlebar). It replaces location functions with polar \ncoordinate ones and adds angle of orientation and zoom \nfactor functionalities. We also provide optional attributes to \nbe incorporated into each component such as colored \nshadow generation and finger-size corner handles (as \nshown in Figure 4 and 5) for resizing or re-orientation. \nApplication developers may use these corner handles plus a \nshadow as the visual feedback to indicate that a particular \ndocument is actively being selected and used.  \n"],"Page":4,"Number":4,"Type":"Figure","CaptionBB":[438,288,775,376],"Height":1100,"Width":850,"DPI":100,"ImageBB":[498,72,717,286]}