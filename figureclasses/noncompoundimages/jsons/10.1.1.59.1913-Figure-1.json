{"Caption":"Figure 1: The Cataclysm Hosting Platform Architecture.","ImageText":[{"Text":"Nucleus","TextBB":[352.235,80.6846,357.284,99.0667],"Rotation":3},{"Text":"Cataclysm","TextBB":[210.844,76.8195,244.493,83.5508],"Rotation":0},{"Text":"servers","TextBB":[246.363,76.8195,269.205,83.5508],"Rotation":0},{"Text":"for","TextBB":[271.075,76.8195,280.626,83.5508],"Rotation":0},{"Text":"S2","TextBB":[282.495,76.8195,290.393,83.5508],"Rotation":0},{"Text":"Application","TextBB":[328.24,79.7471,333.288,106.235],"Rotation":3},{"Text":"component","TextBB":[334.784,79.9041,339.832,104.832],"Rotation":3},{"Text":"Cataclysm","TextBB":[116.108,76.8195,149.757,83.5508],"Rotation":0},{"Text":"servers","TextBB":[151.627,76.8195,174.468,83.5508],"Rotation":0},{"Text":"for","TextBB":[176.338,76.8195,185.889,83.5508],"Rotation":0},{"Text":"S1","TextBB":[187.759,76.8195,195.657,83.5508],"Rotation":0},{"Text":"OS","TextBB":[330.512,122.972,337.995,128.02],"Rotation":0},{"Text":"Kernel","TextBB":[339.398,122.972,355.912,128.02],"Rotation":0},{"Text":"Request","TextBB":[315.554,142.916,334.873,147.964],"Rotation":0},{"Text":"Policing","TextBB":[336.275,142.916,355.6,147.964],"Rotation":0},{"Text":"Load","TextBB":[320.54,152.888,333.01,157.937],"Rotation":0},{"Text":"Balancing","TextBB":[334.412,152.888,358.415,157.937],"Rotation":0},{"Text":"Nucleus","TextBB":[330.512,167.847,349.523,172.895],"Rotation":0},{"Text":"Cataclysm","TextBB":[117.978,176.542,151.627,183.273],"Rotation":0},{"Text":"Sentry","TextBB":[123.587,185.267,144.776,191.999],"Rotation":0},{"Text":"Cataclysm","TextBB":[257.589,176.542,291.238,183.273],"Rotation":0},{"Text":"Sentry","TextBB":[263.199,185.267,284.387,191.999],"Rotation":0},{"Text":"Cataclysm","TextBB":[165.969,211.446,199.618,218.177],"Rotation":0},{"Text":"Control","TextBB":[201.488,211.446,226.416,218.177],"Rotation":0},{"Text":"Plane","TextBB":[228.286,211.446,246.154,218.177],"Rotation":0},{"Text":"requests","TextBB":[260.585,200.351,267.316,225.279],"Rotation":3},{"Text":"requests","TextBB":[145.903,200.351,152.634,225.279],"Rotation":3},{"Text":"Provisioning","TextBB":[191.368,192.778,221.602,197.826],"Rotation":0},{"Text":"Free","TextBB":[300.596,231.389,315.128,238.12],"Rotation":0},{"Text":"Server","TextBB":[316.998,231.389,338.179,238.12],"Rotation":0},{"Text":"Pool","TextBB":[340.049,231.389,354.177,238.12],"Rotation":0},{"Text":"clients","TextBB":[175.63,251.022,195.158,257.754],"Rotation":0},{"Text":"across","TextBB":[197.028,251.022,216.556,257.754],"Rotation":0},{"Text":"the","TextBB":[218.426,251.022,227.565,257.754],"Rotation":0},{"Text":"Internet","TextBB":[229.435,251.022,253.114,257.754],"Rotation":0}],"Mention":["The Cataclysm hosting platform consists of a cluster of com-\nmodity servers interconnected by a modern LAN technology such\nas gigabit Ethernet. One or more high bandwidth links connect\nthis cluster to the Internet. Each node in the hosting platform can\ntake on one of three roles: cataclysm server, cataclysm sentry, or\ncataclysm control plane (see Figure 1).\nCataclysm Servers: Cataclysm servers are nodes that run Inter-\nnet applications. The hosting platform may host multiple applica-\ntions concurrently. Each application is assumed to run on a subset\n","The cataclysm sentries were run on dual-processor 1GHz ma-\nchines with 1GB RAM. The cataclysm control plane (responsi-\nble for provisioning) was run on a dual-processor 450MHz ma-\nchine with 1GB RAM. The machines used as cataclysm servers\nhad 2.8GHz processors and 512MB RAM. Finally, the workload\ngenerators were run on machines with processor speeds varying\nfrom 450MHz to 1GHz and with RAM sizes in the range 128MB-\n512MB. All machines ran Linux 2.4.20. In our experiments we\nconstructed replicable applications using the Apache 1.3.28 Web\nserver with PHP support enabled. The file set serviced by these\nWeb servers comprised files of size varying from 1kB to 256kB to\nrepresent the range from small text files to large image files. In\naddition, the Web servers host PHP scripts with different compu-\ntational overheads. The dynamic component of our workload con-\nsist of requests for these scripts. In all the experiments, the SLA\npresented in Figure 1 was used for the applications. Application\nrequests are generated using httperf [16], an open-source Web\nworkload generator.\n","We conducted an experiment with two Web applications hosted\non our Cataclysm platform. The total number of cataclysm servers\navailable in this experiment was 11. The SLAs for both the ap-\nplications were identical and are described in Figure 1. Further,\nthe SLAs imposed a lower bound of 3 on the number of servers\nthat each application could be assigned. The default provisioning\nduration used by the control plane was 30 min.\nThe workloads for the two applications consisted of requests for\nan assortment of PHP scripts and files in the size range 1kB-128kB.\nRequests were sent at a sustainable base rate to the two applica-\ntions throughout the experiment. Overloads were created by send-\ning increased number of requests for a small subset of the scripts\nand static files (to simulate a subset of the content becoming pop-\nular). The experiment began with the two applications running on\n3 servers each. Sentries invoked the provisioning algorithm when\nmore than 50% of the requests were dropped over a 5 min interval.\nFigures 7(a) and 7(c) depict the arrival rates to the two applica-\ntions. The arrival rate for Application 1 was made to increase in a\nstep-like fashion starting from 100 requests\/sec, doubling roughly\nonce every 5 min till it reached a peak value of 1600 requests\/sec.\nAt this point Application 1 was heavily overloaded with the arrival\nrate several times higher than system capacity (which was roughly\n60 request\/sec per server assigned to the service as determined by\noffline measurements). At t=910 sec the sentry, having observed\nmore than 50% of the request being dropped, triggered the pro-\nvisioning algorithm as described in Section 4. The provisioning\nalgorithm responded by pulling one server from the free pool and\nadding it to Application 1. At t=1210 sec, another server was added\nto Application 1 from the free pool. Observe in Figure 7(a) the\nincreases in the admission rates corresponding to these additional\nservers being made available to Application 1. The next interest-\ning event was the default invocation of provisioning at t=1800 sec.\nThe provisioning algorithm added all the 3 servers remaining in\nthe free pool to the heavily overloaded Application 1. Also, based\non recent observation of arrival rates, it predicted an arrival rate\nin the range 1000-10000 requests\/sec and degraded the response\ntime target for Application 1 to 2000 msec based on its QoS table\n(see Figure 1). In the latter part of the experiment, the overload\nof Application 1 subsided and Application 2 got overloaded. The\nfunctioning of the provisioning was qualitatively similar to when\nService 1 was overloaded. Figures 7(b) and 7(d) show the 95th\npercentile response times for the two services during the experi-\nment. The control plane was able to predict changes to arrival rates\nand degrade the response time target according to the SLA result-\n"],"Page":2,"Number":1,"Type":"Figure","CaptionBB":[88,305,391,318],"Height":1100,"Width":850,"DPI":100,"ImageBB":[114,74,369,276]}